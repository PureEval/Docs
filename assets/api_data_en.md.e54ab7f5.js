import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.97522925.js";const h=JSON.parse('{"title":"Data","description":"","frontmatter":{},"headers":[],"relativePath":"api/data_en.md","filePath":"api/data_en.md","lastUpdated":1695225942000}'),l={name:"api/data_en.md"},p=o(`<h1 id="data-api" tabindex="-1">Data <a class="header-anchor" href="#data-api" aria-label="Permalink to &quot;Data {#data-api}&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The content in this section is experimental. Current performance may not be suitable for regular code production, and the APIs in this section may be removed or changed at any time.</p></div><p>This section provides an imperfect method for defining abstract data structures.</p><h2 id="data" tabindex="-1">Data() <a class="header-anchor" href="#data" aria-label="Permalink to &quot;Data() {#data}&quot;">​</a></h2><p>Constructs an abstract data structure.</p><ul><li><strong>Details</strong></li></ul><p>Takes a set of constructor functions and returns an algebraic data structure composed of these constructors.</p><ul><li><strong>Example</strong></li></ul><h5 id="example-1" tabindex="-1">Example 1 <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Maybe</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Just a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Nothing&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Maybe</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Just a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Nothing&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>At this point, the definition of the Maybe object is as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Maybe</span></span>
<span class="line"><span style="color:#e1e4e8;">    - binder // Object for binding to an external environment</span></span>
<span class="line"><span style="color:#e1e4e8;">    - function bindShow(show) =&gt; show // Function for setting how the Data is displayed</span></span>
<span class="line"><span style="color:#e1e4e8;">    - function from(data) =&gt; boolean // Function to determine whether it&#39;s of type Maybe</span></span>
<span class="line"><span style="color:#e1e4e8;">    - function Just(a) =&gt; (Just a) // Actual constructor function</span></span>
<span class="line"><span style="color:#e1e4e8;">    - Nothing =&gt; Nothing // Actual constructor function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Maybe</span></span>
<span class="line"><span style="color:#24292e;">    - binder // Object for binding to an external environment</span></span>
<span class="line"><span style="color:#24292e;">    - function bindShow(show) =&gt; show // Function for setting how the Data is displayed</span></span>
<span class="line"><span style="color:#24292e;">    - function from(data) =&gt; boolean // Function to determine whether it&#39;s of type Maybe</span></span>
<span class="line"><span style="color:#24292e;">    - function Just(a) =&gt; (Just a) // Actual constructor function</span></span>
<span class="line"><span style="color:#24292e;">    - Nothing =&gt; Nothing // Actual constructor function</span></span></code></pre></div><p>For Just/Nothing, their structures are:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Just</span></span>
<span class="line"><span style="color:#e1e4e8;">    - function is(data) =&gt; boolean // Function to determine whether it&#39;s of type Just</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">(Just a)</span></span>
<span class="line"><span style="color:#e1e4e8;">    - a = a</span></span>
<span class="line"><span style="color:#e1e4e8;">    - args = [a]</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">Nothing</span></span>
<span class="line"><span style="color:#e1e4e8;">    - function is(data) =&gt; boolean // Function to determine whether it&#39;s of type Nothing</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Just</span></span>
<span class="line"><span style="color:#24292e;">    - function is(data) =&gt; boolean // Function to determine whether it&#39;s of type Just</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">(Just a)</span></span>
<span class="line"><span style="color:#24292e;">    - a = a</span></span>
<span class="line"><span style="color:#24292e;">    - args = [a]</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Nothing</span></span>
<span class="line"><span style="color:#24292e;">    - function is(data) =&gt; boolean // Function to determine whether it&#39;s of type Nothing</span></span></code></pre></div><p>You can use it like this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Maybe.</span><span style="color:#B392F0;">Just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">foo.a; </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Maybe.Just.</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">(foo); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Maybe.</span><span style="color:#6F42C1;">Just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">foo.a; </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Maybe.Just.</span><span style="color:#6F42C1;">is</span><span style="color:#24292E;">(foo); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><h5 id="example-2" tabindex="-1">Example 2 <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2&quot;">​</a></h5><p>You can also introduce multiple constructor arguments to complete more complex algebraic data structures:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Round</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Round x y r&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Square Round x y r =&gt; Number</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Square</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">round</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> round.r </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Square</span><span style="color:#E1E4E8;">(Round.</span><span style="color:#B392F0;">Round</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">//78.5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Round</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Round x y r&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Square Round x y r =&gt; Number</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Square</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">round</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> round.r </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Square</span><span style="color:#24292E;">(Round.</span><span style="color:#6F42C1;">Round</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//78.5</span></span></code></pre></div><h5 id="example-3" tabindex="-1">Example 3 <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example 3&quot;">​</a></h5><p>If you are using Node.js, or your environment has the concept of global variables, you can directly bind Data to the environment:</p><p>Each algebraic data type&#39;s <code>binder</code> property provides a collection of quantities that can be safely bound to the global scope. These will only include the constructors for each type.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(global, </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Round x y r&#39;</span><span style="color:#E1E4E8;">).binder);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Square Round x y r =&gt; Number</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Square</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">round</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.14</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> round.r </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Square</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Round</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">//78.5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(global, </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Round x y r&#39;</span><span style="color:#24292E;">).binder);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Square Round x y r =&gt; Number</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Square</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">round</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> round.r </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Square</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Round</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//78.5</span></span></code></pre></div><h5 id="example-4" tabindex="-1">Example 4 <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example 4&quot;">​</a></h5><p>You can use <code>bindShow</code> to define a <code>show</code> method for your algebraic data types to convert between algebraic types and basic types.</p><p>Note: The <code>show</code> method will return the type name of that type before it is bound by <code>bindShow</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Nat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Succ m&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Zero&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Nat.</span><span style="color:#B392F0;">bindShow</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    [Zero.is, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    [Succ.is, ({ </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Nat.</span><span style="color:#B392F0;">Succ</span><span style="color:#E1E4E8;">(Nat.</span><span style="color:#B392F0;">Succ</span><span style="color:#E1E4E8;">(Nat.Zero)).</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Nat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Succ m&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Zero&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Nat.</span><span style="color:#6F42C1;">bindShow</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    [Zero.is, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [Succ.is, ({ </span><span style="color:#E36209;">m</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Nat.</span><span style="color:#6F42C1;">Succ</span><span style="color:#24292E;">(Nat.</span><span style="color:#6F42C1;">Succ</span><span style="color:#24292E;">(Nat.Zero)).</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//2</span></span></code></pre></div>`,27),e=[p];function t(c,r,y,i,E,d){return a(),n("div",null,e)}const F=s(l,[["render",t]]);export{h as __pageData,F as default};
