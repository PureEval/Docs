import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.97522925.js";const h=JSON.parse('{"title":"Transform","description":"","frontmatter":{},"headers":[],"relativePath":"api/transform_en.md","filePath":"api/transform_en.md","lastUpdated":1695139615000}'),l={name:"api/transform_en.md"},p=o(`<h1 id="transform-api" tabindex="-1">Transform <a class="header-anchor" href="#transform-api" aria-label="Permalink to &quot;Transform {#transform-api}&quot;">​</a></h1><h2 id="compose" tabindex="-1">compose() <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;compose() {#compose}&quot;">​</a></h2><p>Performs function composition from right to left (the output of the function on the right becomes the input to the function on the left).</p><ul><li><strong>Type</strong></li></ul><p>[ ((b\\to a),(c \\to b),\\ldots,(o\\to p),((u,v,\\ldots,n)\\to o))\\to ((u,v,\\ldots,n)\\to a) ]</p><ul><li><strong>Details</strong></li></ul><p>Takes several functions as arguments. The return value is a function with the same number of arguments as the last argument, which is the result of the function composition from right to left of all the functions in the arguments.</p><p>Obviously, except for the last argument, which may be a multi-argument function, all other arguments should be unary functions.</p><ul><li><strong>Example</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">div_and_add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compose</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">mul</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">div_and_add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">229026</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//114514</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">div_and_add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compose</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">mul</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">div_and_add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">229026</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//114514</span></span></code></pre></div><h2 id="pipe" tabindex="-1">pipe() <a class="header-anchor" href="#pipe" aria-label="Permalink to &quot;pipe() {#pipe}&quot;">​</a></h2><p>Performs function composition from left to right (the output of the function on the left becomes the input to the function on the right).</p><ul><li><strong>Type</strong></li></ul><p>[ (((u,v,\\ldots,n)\\to o),(o\\to p),\\ldots,(c \\to b),(b\\to a))\\to ((u,v,\\ldots,n)\\to a) ]</p><ul><li><strong>Details</strong></li></ul><p>Takes several functions as arguments. The return value is a function with the same number of arguments as the first argument, which is the result of the function composition from left to right of all the functions in the arguments.</p><p>Obviously, except for the first argument, which may be a multi-argument function, all other arguments should be unary functions.</p><ul><li><strong>Example</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">div_and_add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">mul</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">div_and_add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">229026</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//114514</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">div_and_add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">mul</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">div_and_add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">229026</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//114514</span></span></code></pre></div><h2 id="call" tabindex="-1">call() <a class="header-anchor" href="#call" aria-label="Permalink to &quot;call() {#call}&quot;">​</a></h2><p>Executes an existing function.</p><ul><li><strong>Type</strong></li></ul><p>[ ((a,b,\\ldots,n)\\to x)\\to [a,b,\\ldots,n]\\to x ]</p><ul><li><strong>Details</strong></li></ul><p>The first argument is the function to be executed. The second argument represents the parameters for the function to be executed, passed as an array.</p><ul><li><strong>Example</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(foo, [</span><span style="color:#9ECBFF;">&#39;114&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;514&#39;</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">//&quot;114514&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(foo, [</span><span style="color:#032F62;">&#39;114&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;514&#39;</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">//&quot;114514&quot;</span></span></code></pre></div><h2 id="andThen" tabindex="-1">andThen() <a class="header-anchor" href="#andThen" aria-label="Permalink to &quot;andThen() {#andThen}&quot;">​</a></h2><p>Adds a function after a Promise, equivalent to <code>Promise.then</code>.</p><ul><li><strong>Type</strong></li></ul><p>[ (resolve,reject)\\to a|e\\to \\text{Promise}\\ a\\to a|e ]</p><ul><li><strong>Details</strong></li></ul><p>The first argument is a function, and the second argument passes in the Promise object to be operated on.</p><ul><li><strong>Example</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">//...do sth.</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(fetch, </span><span style="color:#B392F0;">andThen</span><span style="color:#E1E4E8;">(toUpper));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//...do sth.</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(fetch, </span><span style="color:#6F42C1;">andThen</span><span style="color:#24292E;">(toUpper));</span></span></code></pre></div><h2 id="tryCatch" tabindex="-1">tryCatch() <a class="header-anchor" href="#tryCatch" aria-label="Permalink to &quot;tryCatch() {#tryCatch}&quot;">​</a></h2><p>Function wrapper for error detection.</p><ul><li><strong>Type</strong></li></ul><p>[ f\\to (e\\to *)\\to f ]</p><ul><li><strong>Details</strong></li></ul><p>The first argument passes in a function <code>tryer</code>, and the second argument passes in a function <code>reject</code>. The return value is the curried wrapper of the <code>tryer</code> function.</p><p><code>tryCatch</code> essentially creates a wrapper for <code>tryer</code>, returning the normal output of <code>tryer</code> when no error occurs. Otherwise, it will pass both the error and the arguments given to <code>tryer</code> to <code>reject</code>.</p><ul><li><strong>Example</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryCatch</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">always</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//hello/INF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryCatch</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">always</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//hello/INF</span></span></code></pre></div>`,44),e=[p];function t(r,c,i,y,E,d){return a(),n("div",null,e)}const g=s(l,[["render",t]]);export{h as __pageData,g as default};
