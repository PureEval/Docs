import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b4a6b2f6.js";const h=JSON.parse('{"title":"Match","description":"","frontmatter":{},"headers":[],"relativePath":"api/match.md","filePath":"api/match.md","lastUpdated":1693059050000}'),p={name:"api/match.md"},o=l(`<h1 id="match-api" tabindex="-1">Match <a class="header-anchor" href="#match-api" aria-label="Permalink to &quot;Match {#match-api}&quot;">​</a></h1><h2 id="match" tabindex="-1">match() <a class="header-anchor" href="#match" aria-label="Permalink to &quot;match() {#match}&quot;">​</a></h2><p>进行模式匹配。</p><ul><li><strong>Details</strong></li></ul><p>传入若干组数组一一对应每条规则，每个数组中有两个元素，这里记为 checker 与 executer。</p><p>match 将会返回一个函数，该函数接收一定数量的参数，并根据每条规则按顺序匹配第一个符合条件的 checker，执行对应的 executer 并返回结果。</p><p>对于每个 checker 的详细检测规则如下：</p><table><thead><tr><th style="text-align:center;">checker 类型</th><th style="text-align:center;">模式匹配参数个数<sup>[2]</sup></th><th style="text-align:center;">匹配规则</th></tr></thead><tbody><tr><td style="text-align:center;">基本量字面值(number/string/object/array<sup>[1]</sup>/<a href="/api/maybe.html#maybe">maybe</a>)</td><td style="text-align:center;">1</td><td style="text-align:center;">将会比较参数与字面值是否相等<sup>[3]</sup>来判断是否匹配成功</td></tr><tr><td style="text-align:center;">function(sync)</td><td style="text-align:center;">任意</td><td style="text-align:center;">将匹配值全部传给该函数，根据函数返回的 true/false 信息判断是否匹配成功</td></tr><tr><td style="text-align:center;">array</td><td style="text-align:center;">Array 长度</td><td style="text-align:center;">Array 中可包含前两种匹配方式，将会对每个值采取单独的匹配方式，若都匹配成功则认为匹配成功</td></tr><tr><td style="text-align:center;"><a href="/api/placeholder.html#otherwise">otherwise</a></td><td style="text-align:center;">任意</td><td style="text-align:center;">采用该方式的匹配总是成功的，用于处理分类为“其他”的情况</td></tr></tbody></table><p>对于每个 executer 的执行规则如下：</p><table><thead><tr><th style="text-align:center;">executer 类型</th><th style="text-align:center;">执行规则</th><th style="text-align:center;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">字面值</td><td style="text-align:center;">匹配成功后将直接返回该字面值</td><td style="text-align:center;">/</td></tr><tr><td style="text-align:center;">function</td><td style="text-align:center;">将匹配值全部传给该函数，并返回该函数的执行结果</td><td style="text-align:center;">虽然该函数没有像 checker 那样标注必须为同步函数，但如果是一个返回 Promise 的函数，我们会原样返回一个 Promise 而不对其进行处理</td></tr></tbody></table><p>备注：</p><p>[1] : 因为 match 的设计依赖于 array 来进行分类，所以当您想编写匹配一个 array 字面量的逻辑时，请为其多套一层数组（可见下文例子）。</p><p>[2] : 此列只作标识作用，实际通过 match 返回的函数的 length 属性的值为 0。</p><p>[3] : match 对于 number/string 的相等规则与 <a href="/api/logic.html#equalstrict">equalStrict</a> 相同；对于 object/array 的相等规则与 <a href="/api/logic.html#deepequal">deepEqual</a> 相同；对于 maybe 的相等规则为 按 <a href="/api/logic.html#equalstrict">equalStrict</a> 规则比对 fold 后的值。</p><ul><li><strong>Example</strong></li></ul><h5 id="example-1" tabindex="-1">Example 1 <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example 1&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sort</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	[[[]], []],</span></span>
<span class="line"><span style="color:#E1E4E8;">	[</span></span>
<span class="line"><span style="color:#E1E4E8;">		_,</span></span>
<span class="line"><span style="color:#E1E4E8;">		([</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">xs</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">lte</span><span style="color:#E1E4E8;">(x), xs)),</span></span>
<span class="line"><span style="color:#E1E4E8;">			x,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">gt</span><span style="color:#E1E4E8;">(x), xs))</span></span>
<span class="line"><span style="color:#E1E4E8;">		]</span></span>
<span class="line"><span style="color:#E1E4E8;">	]</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fib</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    [_, (</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fib</span><span style="color:#E1E4E8;">(v </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fib</span><span style="color:#E1E4E8;">(v </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sort</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	[[[]], []],</span></span>
<span class="line"><span style="color:#24292E;">	[</span></span>
<span class="line"><span style="color:#24292E;">		_,</span></span>
<span class="line"><span style="color:#24292E;">		([</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">xs</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">lte</span><span style="color:#24292E;">(x), xs)),</span></span>
<span class="line"><span style="color:#24292E;">			x,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">gt</span><span style="color:#24292E;">(x), xs))</span></span>
<span class="line"><span style="color:#24292E;">		]</span></span>
<span class="line"><span style="color:#24292E;">	]</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fib</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [_, (</span><span style="color:#E36209;">v</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fib</span><span style="color:#24292E;">(v </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fib</span><span style="color:#24292E;">(v </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h5 id="example-2" tabindex="-1">Example 2 <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example 2&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Data Nat = Succ Nat | Zero</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Nat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Succ m&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Zero&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(global, Nat.binder);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// instance Show Nat</span></span>
<span class="line"><span style="color:#E1E4E8;">Nat.</span><span style="color:#B392F0;">bindShow</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    [Zero.is, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    [Succ.is, ({ </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> m.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// add :: Nat -&gt; Nat -&gt; Nat</span></span>
<span class="line"><span style="color:#6A737D;">// add n Zero = n</span></span>
<span class="line"><span style="color:#6A737D;">// add n (Succ m) = Succ (add n m)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	[[_, </span><span style="color:#B392F0;">eqData</span><span style="color:#E1E4E8;">(Zero)], (</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> n],</span></span>
<span class="line"><span style="color:#E1E4E8;">	[[_, </span><span style="color:#B392F0;">eqData</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Succ</span><span style="color:#E1E4E8;">(_))], (</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Succ</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(n, m))]</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Succ</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Succ</span><span style="color:#E1E4E8;">(Zero)), </span><span style="color:#B392F0;">Succ</span><span style="color:#E1E4E8;">(Zero)).</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Data Nat = Succ Nat | Zero</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Nat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Succ m&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Zero&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(global, Nat.binder);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// instance Show Nat</span></span>
<span class="line"><span style="color:#24292E;">Nat.</span><span style="color:#6F42C1;">bindShow</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    [Zero.is, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [Succ.is, ({ </span><span style="color:#E36209;">m</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// add :: Nat -&gt; Nat -&gt; Nat</span></span>
<span class="line"><span style="color:#6A737D;">// add n Zero = n</span></span>
<span class="line"><span style="color:#6A737D;">// add n (Succ m) = Succ (add n m)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	[[_, </span><span style="color:#6F42C1;">eqData</span><span style="color:#24292E;">(Zero)], (</span><span style="color:#E36209;">n</span><span style="color:#24292E;">, </span><span style="color:#E36209;">_</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> n],</span></span>
<span class="line"><span style="color:#24292E;">	[[_, </span><span style="color:#6F42C1;">eqData</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Succ</span><span style="color:#24292E;">(_))], (</span><span style="color:#E36209;">n</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">m</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Succ</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(n, m))]</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Succ</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Succ</span><span style="color:#24292E;">(Zero)), </span><span style="color:#6F42C1;">Succ</span><span style="color:#24292E;">(Zero)).</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//3</span></span></code></pre></div>`,19),t=[o];function e(c,r,y,E,i,d){return a(),n("div",null,t)}const m=s(p,[["render",e]]);export{h as __pageData,m as default};
